#actor FibonacciHelper {
#   attribute integer depth;
#   constructor(integer depth) {
#      self.depth = depth;
#   }
#   message compute(integer level, integer fibk, integer fibk1)
#   returns (integer answer) {
#      if (level = depth) {
#         return fibk1; # shorthand for “answer = fibk1; return;”
#      } else {
#         # tail calls should not have to be just to self
#         return self.compute(level+1, fibk+fibk1, fibk);
#      }
#   }
#}

.actor FibonacciHelper
 F0 uint 0
 F1 uint 1
 F2 uint 2
 F3 uint 3
 F4 uint 4
 F5 mdef compute

..message CONSTRUCTOR # S0 = depth
  SET I0 S0 # I0 = Self.Depth
  REPLY F0
  STOP_FRAME

..message compute # S0 = level, S1 = fibk, S2 = fibk1
   BRANCH_EQ T F I0 S0 F3 # if Self.Depth != level then goto 3
   SET L0 S2
   REPLY L0
   ADD L0 S0 F1 # L0 := level + 1
   ADD L1 S1 S2 # L1 := fibk + fibk1
   SET L2 S1 # L2 := fibk
   FOLD L4 L0 F3 # L4 := fold(L0, L1, L2)
   GOSUB T T L4 F0 F5 # tailcall self
   STOP_FRAME

#actor Fibonacci {
#   message compute(integer value) returns (integer answer) {
#      local FibonacciHelper helper(value);
#      answer = helper.compute(1, 1, 0);
#      return; # returns [answer] 1-tuple
#   }
#}

.actor Fibonacci
 F0 uint 0
 F1 uint 1
 F2 uint 2
 F3 uint 3
 F4 uint 4
 F5 mdef compute
 F6 adef FibonacciHelper
 F7 str "Fibonacci("
 F8 str ")="

..message CONSTRUCTOR
  REPLY F0
  STOP_FRAME

..message Compute
  NEW_ACTOR L0 F6 S0
  SET L1 F1
  SET L2 F1
  SET L3 F0
  FOLD L4 L1 F3
  SEND T F L4 L0 F5
  SET L6 F7
  SET L7 S0
  SET L8 F8
  PEEK L9 L5 F0
  FOLD L10 L6 F4
  TRAP L11 F1 L10
  REPLY L9
  STOP_FRAME
  
